{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","components/card-list/card-list-original.component.jsx","AppOriginal.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","CardListOriginal","children","AppOriginal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,0NCI9BC,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,gCAAOL,EAAMI,QAAQE,KAArB,KACA,+BAAMN,EAAMI,QAAQG,MAApB,QCLKC,G,KAAW,SAACR,GAAD,OACpB,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCL/BQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CHG,G,4DAhDb,aAAe,IAAD,8BACZ,gBA0BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAzBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEAWO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAiBjC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAElD,OACE,yBAAK/B,UAAU,OACb,kDACA,kBAAC,EAAD,CACEY,YAAY,kBACZC,aAAee,KAAKf,eAJxB,IAKE,kBAAC,EAAD,CAAUL,SAAUqB,S,GA3CVI,cCHLC,EAAmB,SAACnC,GAAD,OAC5B,yBAAKC,UAAU,aAAaD,EAAMoC,WC8FvBC,E,kDA5Fb,aAAc,IAAD,8BACX,gBAEKd,MAAQ,CACXjB,KAAM,6BACNG,SAAU,CACR,CACEH,KAAM,eACND,GAAI,QAEN,CACEC,KAAM,UACND,GAAI,QAEN,CACEC,KAAM,SACND,GAAI,UAhBC,E,gEAsBO,IAAD,OACjBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAIzC,OACE,yBAAK3B,UAAU,OACf,kBAAC,EAAD,CAAkBK,KAAK,QAAvB,gCACA,kBAAC,EAAD,CAAkBA,KAAK,YACpBuB,KAAKN,MAAMd,SAASC,KAAI,SAAAN,GAAO,OAC9B,wBAAIO,IAAKP,EAAQC,IAAjB,IAAuBD,EAAQE,KAA/B,SAIFuB,KAAKN,MAAMd,SAASC,KAAI,SAAAN,GAAO,OAC7B,wBAAIO,IAAKP,EAAQC,IAAjB,IAAuBD,EAAQE,c,GAxCf4B,aCONI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,OAGAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c69333ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2> { props.monster.name } </h2>\r\n        <p> { props.monster.email } </p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))}\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n      />\r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component{\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this); -- verbose way of binding. Use anonymous function instead - see below\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then (users=> this.setState({ monsters: users }));\n  }\n\n  // if just handleChange = {...} then we would need the explicit bind above\n  // the anonymous function e => or (e) => gets run when the code is parsed out and this is assigne\n  // to the lexical context in which it is running the anonymous function - which is at the app component\n  // so that the anonymous function executes and returns the pointer function to handleChange already bound\n  // to the correct lexical scope of the app component. Any references to 'this' are set to the currently \n  // executing lexical scope. Which would be the app component.\n  // for example, going to the browser devtools console and typing\n  // const newFunct = () => console.log(this) and then newFunc() would show the context as Window\n  // since this was at the Window level\n  // https://reactjs.org/docs/handling-events.html\n  handleChange = (e) => { \n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={ this.handleChange } /> {/* equivalent to e => this.handleChange */}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardListOriginal = (props) => (\r\n    <div className='card-list'>{props.children}</div>\r\n);\r\n","import React, { Component } from 'react';\r\nimport { CardListOriginal } from './components/card-list/card-list-original.component';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass AppOriginal extends Component{\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      name: 'Hello master, Jeff Patrick',\r\n      monsters: [\r\n        {\r\n          name: 'Frankenstein',\r\n          id: 'asc1'\r\n        },\r\n        {\r\n          name: 'Dracula',\r\n          id: 'asc2'\r\n        },\r\n        {\r\n          name: 'Zombie',\r\n          id: 'asc3'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then (users=> this.setState({ monsters: users }))\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n      <CardListOriginal name=\"jeff\">Micah, Brenda, Samuel, Tasha</CardListOriginal>\r\n      <CardListOriginal name='monsters'>\r\n        {this.state.monsters.map(monster => (\r\n          <h1 key={monster.id}> {monster.name} </h1>\r\n        ))}\r\n      </CardListOriginal>\r\n      {\r\n        this.state.monsters.map(monster => (\r\n          <h1 key={monster.id}> {monster.name}</h1>\r\n        ))\r\n      }\r\n      {\r\n        /*\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Hello Jeff Patrick\r\n          </p>\r\n          <p>\r\n            {this.state.name}          \r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n          <button onClick={() => this.setState({ name: 'Hello my master'})}>Change Text</button>\r\n        </header>\r\n      */\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <p>booger\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default AppOriginal;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppOriginal from './AppOriginal';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  {/*<AppOriginal />*/}\n  <AppOriginal />\n  \n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}